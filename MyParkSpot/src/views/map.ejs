<!doctype html>
<html lang="en">
  <head>
    <%- include('shared/includes/meta') %> <%- include('shared/includes/styles')
    %> <%- include('shared/includes/leafletstyles') %>
    <title>MyParkSpot - Map</title>
  </head>
  <body>
    <div class="relative z-10"><%- include('shared/partials/header') %></div>
    <div id="map" class="relative z-0"></div>
    <%- include('shared/includes/leafletscripts') %>
    <div
      id="parking-info"
      class="shadow-custom fixed bottom-0 z-10 hidden w-full bg-white p-4 sm:p-6 md:px-10 xl:px-20">
      <div
        class="flex flex-col items-start justify-between sm:flex-row sm:items-center">
        <div class="mb-2 sm:mb-0">
          <h3 class="text-lg font-medium text-primary sm:text-xl">
            Parking spot information
          </h3>
          <p id="parking-details" class="mt-2 text-secondary"></p>
        </div>
        <div class="flex items-center justify-center gap-2 sm:gap-4">
          <button
            id="pay-parking"
            class="btn-sm btn transform rounded-full border bg-accent1 px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            Park Here
          </button>
          <button
            id="close-info"
            class="btn-sm btn transform rounded-full border px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            Close
          </button>
        </div>
      </div>
    </div>
    <script>
      function decodeHtmlEntities(text) {
        const textArea = document.createElement('textarea');
        textArea.innerHTML = text;
        return textArea.value;
      }

      const rawParkingSpots = '<%= parkingSpots %>';
      const decodedParkingSpots = decodeHtmlEntities(rawParkingSpots);
      const parsedParkingSpots = JSON.parse(decodedParkingSpots);

      const parkingSpots = parsedParkingSpots.map(spot => {
        return {
          lat: spot.latitude,
          lng: spot.longitude,
          isOccupied: spot.isOccupied,
          price: spot.price,
        };
      });
      console.log(parkingSpots);

      const map = L.map('map', {
        attributionControl: false,
        zoomControl: false,
        worldCopyJump: true,
        maxBoundsViscosity: 1.0,
      }).setView([43.3209, 21.8958], 14);

      L.tileLayer(
        'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',
        {
          subdomains: 'abcd',
          maxZoom: 20,
          minZoom: 2,
          opacity: 0.9,
          detectRetina: true,
        }
      ).addTo(map);

      L.control
        .attribution({
          position: 'bottomright',
          prefix: false,
        })
        .addAttribution('Leaflet | &copy; OpenStreetMap &copy; CARTO')
        .addTo(map);

      L.control
        .zoom({
          position: 'topleft',
        })
        .addTo(map);

      L.control
        .fullscreen({
          position: 'topright',
          title: 'View Fullscreen',
          titleCancel: 'Exit Fullscreen',
        })
        .addTo(map);

      L.control
        .locate({
          position: 'topright',
          flyTo: true,
          strings: {
            title: 'Show me where I am',
          },
        })
        .addTo(map);

      const parkingIconHtml =
        '<i class="fa-sharp-duotone fa-regular fa-circle-parking" style="font-size: 30px; color: #669c35;"></i>';
      const reservedParkingIconHtml =
        '<i class="fa-sharp-duotone fa-regular fa-circle-parking" style="font-size: 30px; color: red;"></i>';

      const parkingIcon = L.divIcon({
        html: parkingIconHtml,
        className: 'custom-div-icon',
        iconSize: [30, 30],
        iconAnchor: [15, 30],
        popupAnchor: [0, -30],
      });

      const reservedParkingIcon = L.divIcon({
        html: reservedParkingIconHtml,
        className: 'custom-div-icon',
        iconSize: [30, 30],
        iconAnchor: [15, 30],
        popupAnchor: [0, -30],
      });

      const markers = L.markerClusterGroup({
        showCoverageOnHover: false,
      });

      parkingSpots.forEach(spot => {
        const marker = L.marker([spot.lat, spot.lng], {
          icon: spot.isOccupied ? reservedParkingIcon : parkingIcon,
        });

        marker.on('click', () => {
          document.getElementById('parking-info').classList.remove('hidden');
          document.getElementById('parking-details').innerHTML = `
            <p>Status: ${spot.isOccupied ? 'Occupied' : 'Available'}</p>
            <p>Price: ${spot.price} EUR/hour</p>
          `;
          adjustMapHeight();
        });

        markers.addLayer(marker);
      });

      map.addLayer(markers);

      function adjustMapHeight() {
        const parkingInfo = document.getElementById('parking-info');
        const map = document.getElementById('map');
        if (parkingInfo.classList.contains('hidden')) {
          map.style.height = 'calc(100% - 90px)';
        } else {
          const parkingInfoHeight = parkingInfo.offsetHeight;
          map.style.height = `calc(100% - 90px - ${parkingInfoHeight}px)`;
        }
      }

      window.addEventListener('resize', adjustMapHeight);

      document.getElementById('close-info').addEventListener('click', () => {
        document.getElementById('parking-info').classList.add('hidden');
        adjustMapHeight();
      });
    </script>

    <%- include('shared/includes/scripts') %>
  </body>
</html>
