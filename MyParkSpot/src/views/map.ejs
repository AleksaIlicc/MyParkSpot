<!doctype html>
<html lang="en">
  <head>
    <%- include('shared/includes/meta') %> <%- include('shared/includes/styles')
    %> <%- include('shared/includes/leafletstyles') %>
    <title>MyParkSpot - Map</title>
  </head>
  <body>
    <div class="relative z-10"><%- include('shared/partials/header') %></div>
    <div id="map" class="relative z-0"></div>
    <div
      id="parking-info"
      class="fixed bottom-0 z-10 hidden w-full bg-white p-4 shadow-custom sm:p-6 md:px-10 xl:px-20">
      <div
        class="flex flex-col items-start justify-between sm:flex-row sm:items-center">
        <div class="mb-2 sm:mb-0">
          <h3 class="text-lg font-medium text-primary sm:text-xl">
            Parking spot information
          </h3>
          <p id="parking-details" class="mt-2 text-secondary"></p>
        </div>
        <div class="flex items-center justify-center gap-2 sm:gap-4">
          <% if (user?.role === 'founder' || user?.role === 'user') { %>
          <button
            id="park-here"
            class="btn-sm btn hidden transform cursor-pointer rounded-full border bg-accent px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            Park Here
          </button>
          <button
            id="unpark-here"
            class="btn-sm btn hidden transform cursor-pointer rounded-full border bg-accent px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            End Parking
          </button>
          <% } %>
          <button
            id="zone-info"
            class="btn-sm btn transform cursor-pointer rounded-full border px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            Zone Info
          </button>
          <button
            id="close-info"
            class="btn-sm btn transform cursor-pointer rounded-full border px-4 py-2 font-semibold transition duration-300 ease-in-out hover:scale-105 md:px-6 md:py-2">
            Close
          </button>
        </div>
      </div>
    </div>
    <div
      id="parkModal"
      class="fixed inset-0 z-50 flex hidden items-center justify-center overflow-y-auto bg-black bg-opacity-50">
      <div
        class="relative w-full max-w-sm rounded-xl bg-white px-6 py-8 shadow-xl">
        <button
          type="button"
          id="closeParkModal"
          class="absolute right-6 top-5 text-lg text-gray-500 hover:text-gray-700 focus:outline-none">
          <i class="fa-solid fa-xmark"></i>
        </button>

        <h2 class="mb-4 text-xl font-semibold text-gray-800">
          Rent Parking Spot
        </h2>
        <form action="/rent-parking-spot" method="POST" class="space-y-6">
          <div>
            <h3 class="text-md mb-2 font-medium text-gray-700">
              Parking Duration
            </h3>
            <div
              id="parking-duration-options"
              class="grid grid-cols-2 gap-2 sm:gap-6"></div>
          </div>

          <input
            type="hidden"
            name="parkingDuration"
            id="parkingDuration"
            value="" />

          <div>
            <h3 class="text-md mb-2 font-medium text-gray-700">
              Select Your Car
            </h3>
            <% if (cars && cars.length > 0) { %>
            <div class="grid grid-cols-2 gap-2 sm:gap-6">
              <% cars.forEach(function(car) { %> <% if (car.isParked) { %>
              <div
                class="car-option relative transform cursor-not-allowed rounded-lg border border-gray-300 p-4 opacity-50">
                <p class="text-md text-center font-semibold text-gray-800">
                  <%= car.licensePlate %>
                </p>
                <p class="mt-1 text-center text-sm text-gray-600">
                  <%= car.manufacturer %> <%= car.model %> <% if (car.year) { %>
                  (<%= car.year %>) <% } %>
                </p>
                <span
                  class="absolute right-2 top-2 rounded bg-accent px-2 py-1 text-xs text-white"
                  >Parked</span
                >
              </div>
              <% } else { %>
              <div
                class="car-option transform cursor-pointer rounded-lg border border-gray-200 p-4 transition-transform hover:scale-105 focus:outline-none"
                data-value="<%= car.id %>">
                <p class="text-md text-center font-semibold text-gray-800">
                  <%= car.licensePlate %>
                </p>
                <p class="mt-1 text-center text-sm text-gray-600">
                  <%= car.manufacturer %> <%= car.model %> <% if (car.year) { %>
                  (<%= car.year %>) <% } %>
                </p>
              </div>
              <% } %> <% }); %>
            </div>
            <% } else { %>
            <p class="text-sm text-gray-500">
              No cars available. Please add a car to rent parking.
            </p>
            <% } %>
          </div>

          <input type="hidden" name="carId" id="carId" value="" />
          <input type="hidden" id="parkingSpot" name="parkingSpotId" value="" />
          <div class="flex justify-end space-x-4">
            <button
              type="button"
              id="cancelParkModal"
              class="btn-sm btn transform rounded-full border px-6 py-2 font-semibold hover:bg-gray-100">
              Cancel
            </button>
            <button
              type="submit"
              class="btn-sm btn transform rounded-full border bg-primary px-6 py-2 font-medium text-white hover:bg-hover disabled:opacity-50"
              id="submitParkBtn"
              disabled>
              Park
            </button>
          </div>
        </form>
      </div>
    </div>
    <div
      id="zone-info-modal"
      class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50">
      <div
        class="relative w-full max-w-sm rounded-xl bg-white px-6 py-8 shadow-xl">
        <button
          type="button"
          id="close-zone-info-modal-icon"
          class="absolute right-6 top-5 text-lg text-gray-500 hover:text-gray-700 focus:outline-none">
          <i class="fa-solid fa-xmark"></i>
        </button>
        <h2 class="mb-4 text-xl font-semibold text-gray-800">
          Zone Info - <span id="zone-info-type"></span>
        </h2>
        <div class="space-y-6">
          <div id="zone-info-content" class="text-sm text-gray-700">
            <div class="flex flex-col gap-3">
              <div class="flex justify-between">
                <p>Max Parking Duration:</p>
                <p id="zone-info-max-parking"></p>
              </div>
              <div class="flex justify-between">
                <p>Base Cost:</p>
                <p id="zone-info-base-cost"></p>
              </div>
              <div class="flex justify-between">
                <p>Max Extension Duration:</p>
                <p id="zone-info-extension-duration"></p>
              </div>
              <div class="flex justify-between">
                <p>Extension Cost:</p>
                <p id="zone-info-extension-cost"></p>
              </div>
              <div class="flex justify-between">
                <p>Daily Pass Cost:</p>
                <p id="zone-info-daily-cost"></p>
              </div>
            </div>
          </div>
          <div class="flex justify-end">
            <button
              id="close-zone-info-modal"
              class="btn-sm btn transform rounded-full border px-6 py-2 font-semibold hover:bg-gray-100">
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
    <%- include('shared/includes/leafletscripts') %> <%-
    include('shared/includes/scripts') %>
    <script>
      // Functions
      function capitalizeFirstLetter(val) {
        return String(val).charAt(0).toUpperCase() + String(val).slice(1);
      }
      function convertToMinutes(option) {
        if (option.includes('hour')) {
          const hours = parseInt(option);
          return hours * 60;
        }
        if (option.includes('minutes')) {
          return parseInt(option);
        }
        if (option === 'Full Day') {
          return -1;
        }
        return 0;
      }
      function decodeHtmlEntities(text) {
        const textArea = document.createElement('textarea');
        textArea.innerHTML = text;
        return textArea.value;
      }
      function adjustMapHeight() {
        const header = document.querySelector('header');
        const parkingInfo = document.getElementById('parking-info');
        const map = document.getElementById('map');
        const headerHeight = header.offsetHeight;
        const parkingInfoHeight = parkingInfo.classList.contains('hidden')
          ? 0
          : parkingInfo.offsetHeight;

        map.style.height = `calc(100vh - ${headerHeight}px - ${parkingInfoHeight}px)`;
      }
      function getZoneColor(zoneType) {
        const zoneColors = {
          purple: '#8A2BE2',
          red: '#FF0800',
          yellow: '#ffd800',
          green: '#66FF00',
          blue: '#00BFFF',
        };
        return zoneColors[zoneType] ?? 'pink';
      }
      function createParkingIcon(zoneType, isOccupied, userRentals, spotId) {
        let firstColor;
        let secondColor;

        const userRental = userRentals.find(
          rental => rental.parkingSpotId === spotId
        );
        if (userRental) {
          firstColor = secondColor = '#01010d';
        } else if (isOccupied) {
          firstColor = secondColor = 'silver';
        } else {
          firstColor = '#5c7687';
          secondColor = getZoneColor(zoneType);
        }

        return L.divIcon({
          html: `
                  <i class="fa-solid fa-square-parking"
                    style="font-size: 26px; color: transparent;
                    background: radial-gradient(circle at top,${firstColor} 60%, ${secondColor} 95%);
                    -webkit-background-clip: text;">
                  </i>
                `,
          className: 'custom-div-icon',
          iconSize: [30, 30],
          iconAnchor: [15, 30],
          popupAnchor: [0, -30],
        });
      }
      adjustMapHeight();

      // Check for unauthorized user
      const user = '<%= user %>';
      let isNavigationAllowed = false;

      const parkBtn = document.getElementById('park-here');
      if (!user) {
        parkBtn?.addEventListener('click', e => {
          e.preventDefault();
          window.location.href = '/auth/login';
        });
      }
      // Preparing parking rentals by user
      const rawRentals = '<%= userRentals %>';
      const decodedRentals = decodeHtmlEntities(rawRentals);
      const userRentals = JSON.parse(decodedRentals);

      // Preparing parking spots data for map
      const rawParkingSpots = '<%= parkingSpots %>';
      const decodedParkingSpots = decodeHtmlEntities(rawParkingSpots);
      const parsedParkingSpots = JSON.parse(decodedParkingSpots);

      const parkingSpots = parsedParkingSpots.map(spot => {
        return {
          id: spot.id,
          lat: spot.latitude,
          lng: spot.longitude,
          isOccupied: spot.isOccupied,
          zone: spot.zone,
        };
      });

      // Leaflet Map
      const map = L.map('map', {
        attributionControl: false,
        zoomControl: false,
        worldCopyJump: true,
        maxBoundsViscosity: 1.0,
      }).setView([43.3209, 21.8958], 14);

      L.tileLayer(
        'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',
        {
          subdomains: 'abcd',
          maxZoom: 23,
          minZoom: 2,
          opacity: 0.9,
          detectRetina: true,
        }
      ).addTo(map);

      L.control
        .attribution({
          position: 'bottomright',
          prefix: false,
        })
        .addAttribution('Leaflet | &copy; OpenStreetMap &copy; CARTO')
        .addTo(map);

      L.control
        .zoom({
          position: 'topleft',
        })
        .addTo(map);

      L.control
        .fullscreen({
          position: 'topright',
          title: 'View Fullscreen',
          titleCancel: 'Exit Fullscreen',
        })
        .addTo(map);

      const locateControl = L.control
        .locate({
          position: 'topright',
          flyTo: true,
          strings: {
            title: 'Show me where I am',
          },
        })
        .addTo(map);

      map.on('locationfound', function (e) {
        isNavigationAllowed = true;
        console.log('Location found:', e.latlng);
      });

      map.on('stop', function () {
        console.log('User has stopped locating');
        isNavigationAllowed = false;
      });

      map.on('locationerror', function (e) {
        console.error('Location error:', e.message);
        isNavigationAllowed = false;
      });

      const markers = L.markerClusterGroup({
        showCoverageOnHover: false,
      });

      let zone;
      parkingSpots.forEach(spot => {
        const marker = L.marker([spot.lat, spot.lng], {
          icon: createParkingIcon(
            spot.zone.type,
            spot.isOccupied,
            userRentals,
            spot.id
          ),
        });

        marker.on('click', () => {
          document.getElementById('parking-info').classList.remove('hidden');
          if (spot.isOccupied) {
            document.getElementById('park-here')?.classList.add('hidden');
            const isUserSpot = userRentals.some(
              rental => rental.parkingSpotId === spot.id
            );
            if (isUserSpot) {
              document
                .getElementById('unpark-here')
                ?.classList.remove('hidden');
              document.getElementById('parkingSpot').value = spot.id;
            } else {
              document.getElementById('unpark-here')?.classList.add('hidden');
            }
          } else {
            document.getElementById('park-here')?.classList.remove('hidden');
            document.getElementById('unpark-here')?.classList.add('hidden');
            document.getElementById('parkingSpot').value = spot.id;
          }
          document.getElementById('parking-details').innerHTML = `
                  <p>Status: ${spot.isOccupied ? 'Occupied' : 'Available'}</p>
                  <p>Zone: ${capitalizeFirstLetter(spot.zone.type)}</p>
                `;
          zone = spot.zone;
          adjustMapHeight();
        });

        markers.addLayer(marker);
      });

      map.addLayer(markers);

      const spotId = '<%= spotId %>';
      if (spotId) {
        const spot = parkingSpots.find(s => s.id === spotId);
        if (spot) {
          map.setView([spot.lat, spot.lng], 23);

          markers.eachLayer(marker => {
            if (
              marker.getLatLng().lat === spot.lat &&
              marker.getLatLng().lng === spot.lng
            ) {
              marker.fire('click');
            }
          });
        }
      }

      window.addEventListener('resize', adjustMapHeight);

      // Location Logic
      function handleLocationUpdate(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const accuracy = position.coords.accuracy;
        const radius = 1;

        fetch(`/api/nearby-parking-spots?lat=${lat}&lng=${lng}&radius=${1}`)
          .then(response => response.json())
          .then(nearbySpots => {
            updateMarkers(nearbySpots);
          })
          .catch(error => console.error('Error fetching nearby spots:', error));
      }

      function handleLocationError(error) {
        fetch(
          `/api/nearby-parking-spots?lat=${43.3209}&lng=${21.8958}&radius=${9999}`
        )
          .then(response => response.json())
          .then(nearbySpots => {
            updateMarkers(nearbySpots);
          })
          .catch(error => console.error('Error fetching nearby spots:', error));
      }

      if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(
          handleLocationUpdate,
          handleLocationError
        );
        setInterval(() => {
          navigator.geolocation.getCurrentPosition(
            handleLocationUpdate,
            handleLocationError
          );
        }, 5000);
      } else {
        console.error('Geolocation is not supported by this browser.');
      }

      function updateMarkers(spots) {
        markers.clearLayers();

        spots.forEach(spot => {
          const marker = L.marker([spot.latitude, spot.longitude], {
            icon: createParkingIcon(
              spot.zone.type,
              spot.isOccupied,
              userRentals,
              spot.id
            ),
          });

          marker.on('click', () => {
            document.getElementById('parking-info').classList.remove('hidden');
            if (spot.isOccupied) {
              document.getElementById('park-here')?.classList.add('hidden');
              const isUserSpot = userRentals.some(
                rental => rental.parkingSpotId === spot.id
              );
              if (isUserSpot) {
                document
                  .getElementById('unpark-here')
                  ?.classList.remove('hidden');
                document.getElementById('parkingSpot').value = spot.id;
              } else {
                document.getElementById('unpark-here')?.classList.add('hidden');
              }
            } else {
              if (!isNavigationAllowed) {
                document
                  .getElementById('park-here')
                  ?.classList.remove('hidden');
                document.getElementById('unpark-here')?.classList.add('hidden');
              }
              document.getElementById('parkingSpot').value = spot.id;
            }
            document.getElementById('parking-details').innerHTML = `
                  <p>Status: ${spot.isOccupied ? 'Occupied' : 'Available'}</p>
                  <p>Zone: ${capitalizeFirstLetter(spot.zone.type)}</p>
                `;
            zone = spot.zone;
            adjustMapHeight();
          });

          markers.addLayer(marker);
        });

        map.addLayer(markers);
      }

      // Park Here Modal
      document.getElementById('close-info').addEventListener('click', () => {
        document.getElementById('parking-info').classList.add('hidden');
        adjustMapHeight();
      });

      // Unpark handler
      const unparkBtn = document.getElementById('unpark-here');
      unparkBtn?.addEventListener('click', () => {
        if (confirm('Are you sure you want to end this parking session?')) {
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = `/unpark/${document.getElementById('parkingSpot').value}`;
          document.body.appendChild(form);
          form.submit();
        }
      });

      const parkModal = document.getElementById('parkModal');
      const closeParkModalBtn = document.getElementById('closeParkModal');
      const cancelParkModalBtn = document.getElementById('cancelParkModal');
      const openParkModal = document.getElementById('park-here');

      let durationOptions;
      const carOptions = document.querySelectorAll('.car-option');
      const parkingDurationInput = document.getElementById('parkingDuration');
      const carIdInput = document.getElementById('carId');
      const submitParkBtn = document.getElementById('submitParkBtn');

      let selectedDuration = null;
      let selectedCarId = null;

      if (user) {
        openParkModal?.addEventListener('click', async () => {
          parkModal.classList.remove('hidden');
          const durationOptionsContainer = document.getElementById(
            'parking-duration-options'
          );
          durationOptionsContainer.innerHTML = '';

          try {
            const response = await fetch(
              `/api/remaining-time?zoneId=${zone.id}`
            );
            if (!response.ok) throw new Error('Failed to get remaining time');
            const {
              remainingRegularTime,
              remainingExtensionTime,
              isInExtensionPeriod,
              hasExtensionAvailable,
              hasDailyPass,
              dailyPassCost,
              baseCost,
              extensionCost,
            } = await response.json();

            const durationOptionsValues = [];

            if (isInExtensionPeriod) {
              if (hasExtensionAvailable && remainingExtensionTime > 0) {
                const maxExtensionHours = Math.floor(
                  remainingExtensionTime / 60
                );
                const max3Hours = maxExtensionHours > 3 ? 3 : maxExtensionHours;
                for (let i = 1; i <= max3Hours; i++) {
                  durationOptionsValues.push({
                    text: `${i} hour${i > 1 ? 's' : ''} (extension)`,
                    value: i * 60,
                    cost: (i * extensionCost).toFixed(2),
                    isExtension: true,
                  });
                }

                const remainingMinutes = remainingExtensionTime % 60;
                if (remainingMinutes > 0) {
                  durationOptionsValues.push({
                    text: `${remainingMinutes} minutes (extension)`,
                    value: remainingMinutes,
                    cost: ((remainingMinutes / 60) * extensionCost).toFixed(2),
                    isExtension: true,
                  });
                }
              }
              if (remainingExtensionTime === 0) {
                durationOptionsContainer.innerHTML =
                  '<p class="text-center text-gray-500 py-3 text-lg col-span-2">You have reached the maximum parking duration for today in this zone.</p>';
                return;
              }
            } else {
              const maxHours = Math.floor(remainingRegularTime / 60);
              const max3Hours = maxHours > 3 ? 3 : maxHours;
              for (let i = 1; i <= max3Hours; i++) {
                durationOptionsValues.push({
                  text: `${i} hour${i > 1 ? 's' : ''}`,
                  value: i * 60,
                  cost: (i * baseCost).toFixed(2),
                });
              }

              const remainingMinutes = remainingRegularTime % 60;
              if (remainingMinutes > 0) {
                durationOptionsValues.push({
                  text: `${remainingMinutes} minutes`,
                  value: remainingMinutes,
                  cost: ((remainingMinutes / 60) * baseCost).toFixed(2),
                });
              }

              if (hasDailyPass) {
                durationOptionsValues.push({
                  text: 'Full Day',
                  value: -1,
                  cost: dailyPassCost.toFixed(2),
                  isDailyPass: true,
                });
              }
            }

            durationOptionsValues.forEach(option => {
              const optionDiv = document.createElement('div');
              optionDiv.className = `duration-option transform cursor-pointer rounded-lg border p-4 text-center transition-all hover:scale-105 focus:outline-none border-gray-300`;
              optionDiv.dataset.value = option.value;

              const optionText = document.createElement('p');
              optionText.className = 'text-sm font-semibold text-gray-800';
              optionText.textContent = option.text;
              optionDiv.appendChild(optionText);

              const costText = document.createElement('p');
              costText.className = 'mt-1 text-xs text-gray-600';
              costText.textContent = `€${option.cost}`;
              optionDiv.appendChild(costText);

              durationOptionsContainer.appendChild(optionDiv);
            });

            durationOptions = document.querySelectorAll('.duration-option');
            durationOptions?.forEach(option => {
              option.addEventListener('click', () => {
                if (!option.dataset.value) return;

                durationOptions?.forEach(opt =>
                  opt.classList.remove('border-primary')
                );

                option.classList.add('border-primary');
                selectedDuration = option.getAttribute('data-value');
                parkingDurationInput.value = selectedDuration;
                toggleSubmitButton();
              });
            });
          } catch (error) {
            durationOptionsContainer.innerHTML =
              '<p class="text-center text-gray-500 py-3 text-lg col-span-2">Failed to load parking options.<br> Please try again.</p>';
          }
        });
      }

      parkModal.addEventListener('click', e => {
        if (e.target === parkModal) {
          parkModal.classList.add('hidden');
          resetModalSelections();
        }
      });

      carOptions.forEach(option => {
        option.addEventListener('click', () => {
          carOptions.forEach(opt =>
            opt.classList.remove('border-gray-200', 'border-primary')
          );

          option.classList.add('border-primary');
          selectedCarId = option.getAttribute('data-value');
          carIdInput.value = selectedCarId;
          toggleSubmitButton();
        });
      });

      function toggleSubmitButton() {
        if (selectedDuration && selectedCarId) {
          submitParkBtn.disabled = false;
        } else {
          submitParkBtn.disabled = true;
        }
      }

      closeParkModalBtn.addEventListener('click', () => {
        parkModal.classList.add('hidden');
        resetModalSelections();
      });

      cancelParkModalBtn.addEventListener('click', () => {
        parkModal.classList.add('hidden');
        resetModalSelections();
      });

      function resetModalSelections() {
        durationOptions?.forEach(opt => {
          opt.classList.remove('border-primary');
        });
        parkingDurationInput.value = '';
        selectedDuration = null;

        carOptions.forEach(opt => {
          opt.classList.remove('border-primary');
        });
        carIdInput.value = '';
        selectedCarId = null;

        submitParkBtn.disabled = true;
      }

      // Zone Info Modal
      const zoneInfoBtn = document.getElementById('zone-info');
      const zoneInfoModal = document.getElementById('zone-info-modal');
      const zoneInfoContent = document.getElementById('zone-info-content');
      const closeZoneInfoBtn = document.getElementById('close-zone-info-modal');
      const closeZoneInfoIcon = document.getElementById(
        'close-zone-info-modal-icon'
      );

      zoneInfoBtn.addEventListener('click', () => {
        if (zone.maxExtensionDuration == null) {
          document
            .getElementById('zone-info-extension-duration')
            .parentElement.classList.add('hidden');
          document
            .getElementById('zone-info-extension-cost')
            .parentElement.classList.add('hidden');
        }
        if (zone.dailyPassCost == null) {
          document
            .getElementById('zone-info-daily-cost')
            .parentElement.classList.add('hidden');
        }
        if (zone.maxParkingDuration == null) {
          document.getElementById('zone-info-max-parking').textContent =
            'Unlimited';
        } else {
          document.getElementById('zone-info-max-parking').textContent =
            `${zone.maxParkingDuration} minutes`;
        }
        document.getElementById('zone-info-type').textContent =
          capitalizeFirstLetter(zone.type);
        if (zone.type == 'purple') {
          document.getElementById('zone-info-base-cost').textContent =
            `${zone.baseCost / 2} EUR`;
        } else {
          document.getElementById('zone-info-base-cost').textContent =
            `${zone.baseCost} EUR/hour`;
        }
        document.getElementById('zone-info-extension-duration').textContent =
          `${zone.maxExtensionDuration} minutes`;
        document.getElementById('zone-info-extension-cost').textContent =
          `${zone.extensionCost} EUR/hour`;
        document.getElementById('zone-info-daily-cost').textContent =
          `${zone.dailyPassCost} EUR/day`;

        zoneInfoModal.classList.remove('hidden');
      });

      function resetVisibilityZoneInfo() {
        document
          .getElementById('zone-info-extension-duration')
          .parentElement.classList.remove('hidden');
        document
          .getElementById('zone-info-extension-cost')
          .parentElement.classList.remove('hidden');
        document
          .getElementById('zone-info-daily-cost')
          .parentElement.classList.remove('hidden');
      }

      zoneInfoModal.addEventListener('click', e => {
        if (e.target === zoneInfoModal) {
          zoneInfoModal.classList.add('hidden');
          resetVisibilityZoneInfo();
        }
      });

      closeZoneInfoIcon.addEventListener('click', () => {
        zoneInfoModal.classList.add('hidden');
        resetVisibilityZoneInfo();
      });

      closeZoneInfoBtn.addEventListener('click', () => {
        zoneInfoModal.classList.add('hidden');
        resetVisibilityZoneInfo();
      });

      toggleSubmitButton();
    </script>
  </body>
</html>
